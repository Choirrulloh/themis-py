# Test without policies -> OK
cd /opt && python -m themis.tmsprov -f --flushdb
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false

# Test any destination/source -> OK (bellow)

### Test SASLUsername ###
## Will rate limit only if saslusername is set
cd /opt
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -a --policy default JailBy SASLUsername JailSpec 1:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Should block only in third sent because saslusername is used only on first and last message

### Test Sender ###
## Must rate limit on every situation
cd /opt
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -a --policy default JailBy Sender JailSpec 1:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Should block after two sent messages

### Test Sender+ ###
## It will use SASLUsername to increase the rate limiting object, if it not present, will use MAIL FROM
## Recommend configure postfix to not permit MAIL FROM different from SALSUsername
cd /opt
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -a --policy default JailBy Sender+ JailSpec 2:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin2@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin2@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Should block object admin@lab01.u.inova.com.br after third message sent

### Test SenderIP ###
## It will use the client IP as rate limiting object
cd /opt
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -a --policy default JailBy SenderIP JailSpec 2:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin2@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin3@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false

## Result: It will block on third request, note that senders differs on each request.

### Test SenderDomain ###
## Same as Sender, but instead of using the full account, it will match only the domain 
cd /opt
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -a --policy default JailBy SenderDomain JailSpec 2:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin2@lab.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin3@lab.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin4@lab.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false

## Result: It will block on forth request, note the domain changes in the requests, that way you can still trick themis

### Test SenderDomain+ ###
## Same as Sender+, but instead of using the full account, it will match only the domain 
cd /opt
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --policy default JailBy SenderDomain+ JailSpec 2:100 Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin2@lab03.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin2@lab02.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin3@lab01.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin4@lab01.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false
python /root/bench.py admin4@lab01.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 false

## Result: It will block on two times, third and last request, note that it will use saslusername domain instead of mailfrom

### Test with source groups ###
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -d --group source_test_group
python -m themis.tmsprov -a --group source_test_group 'admin@lab01.u.inova.com.br @lab.inova.com.br sandro@inova.net @gmail.com'
python -m themis.tmsprov -a --policy default JailBy Sender JailSpec 2:100 Source source_test_group Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin2@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: It should skip in the third sent because admin2@lab01.u.inova.com.br is not in source_test_group

### Test inverted destination/source ###
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -d --group source_test_group
python -m themis.tmsprov -a --group 'source_test_group' 'admin@lab01.u.inova.com.br @lab.inova.com.br sandro@inova.net @gmail.com'
python -m themis.tmsprov -a --policy default JailBy Sender JailSpec 2:100 Source '!source_test_group' Destination any JailAction block
python /root/bench.py admin_zap@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py admin@lab.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true
python /root/bench.py fake@gmail.com admin@lab.inova.com.br 'Bench Test' 2 true

## Result: First mail will match, because it not in the group, the second and third will not match, important to note that jail is Sender

### Test rcpt complex bypass+ ###
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -d --group source_test_group dest_test_group
python -m themis.tmsprov -a --group 'source_test_group' 'admin@lab01.u.inova.com.br'
python -m themis.tmsprov -a --group 'dest_test_group' '@lab.inova.com.br'
python -m themis.tmsprov -a --policy default JailBy Sender JailSpec 2:100 Source source_test_group Destination dest_test_group Type bypass+
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: This snippet will bypass mails sent from admin@lab01.u.inova.com.br to domains @lab.inova.com.br

### Test Bypass by source ###
python -m themis.tmsprov -d --policy default
python -m themis.tmsprov -d --group source_test_group dest_test_group
python -m themis.tmsprov -a --group 'source_test_group' 'admin@lab01.u.inova.com.br'
python -m themis.tmsprov -a --policy default JailBy Sender JailSpec 2:100 Source source_test_group Destination any Type bypass
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: This snippet will bypass mails sent from admin@lab01.u.inova.com.br to any destination

### Test with custom metadata user and manual_block option ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --metadata metadata:admin@lab01.u.inova.com.br
python -m themis.tmsprov -m --metadata metadata:admin@lab01.u.inova.com.br manual_block TRUE
python -m themis.tmsprov -a --policy default JailBy Sender+ JailSpec 4:100 Source any Destination any
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Should block on the first sent

### Test with bypass option ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --metadata metadata:admin@lab01.u.inova.com.br
python -m themis.tmsprov -m --metadata metadata:admin@lab01.u.inova.com.br bypass TRUE
python -m themis.tmsprov -a --policy default JailBy Sender+ JailSpec 4:100 Source any Destination any
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Should bypass the connection and skip policy for admin@lab01.u.inova.com.br object

### Test CountRCPT ON/OFF ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --policy default JailBy Sender+ JailSpec 2:100 Source any Destination any CountRCPT TRUE JailAction block
python /root/bench.py admin@lab01.u.inova.com.br 'admin@lab.inova.com.br,admin@lab01.u.inova.com.br,sandromll@gmail.com' 'Bench Test' 2 true

## Result: Should block in the first sent, countRCPT sum the total of rcpts

### Test global_conditions and jailspec blocking ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --features global
python -m themis.tmsprov -m --features global global_conditions '[[1, 50]]'
python -m themis.tmsprov -a --resync
python -m themis.tmsprov -a --policy default JailBy Sender+ Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 3 true

## Result: Will block using condition 1 request per 50 seconds. Note that config.yaml will be ignored from now on


### Test messagesBySecFeature and requestsmom ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --features global
python -m themis.tmsprov -m --features global messagesBySecStoreDays 10
python -m themis.tmsprov -a --resync
python -m themis.tmsprov -a --policy default JailBy Sender+ Source any Destination any JailAction block RequestsMon TRUE
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 3 true 

## Result: Will store 10 days of data in requestsbysec:global and requestsbysec:default

### Test actionheaders/onlyheaders ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --policy default JailBy Sender+ Source any Destination any JailAction block
python -m themis.tms -a --actionheaders default X-CMAE-Score '(9[6-9]|100).*' X-Spam-Flag YES
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: It will add a custom header: X-Spam-Flag YES

### Test policiesByServerPoolFeature ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --pool outbound 'lab01.u.inova.com.br'
python -m themis.tmsprov -a --policy outbound:default JailBy Sender+ Source any Destination any JailAction block
python -m themis.tmsprov -a --policy default JailBy Sender+ Source any Destination any JailAction block
python /root/bench.py admin@lab01.u.inova.com.br admin@lab.inova.com.br 'Bench Test' 2 true

## Result: Will execute only one policy instead of two

### Test with featuresByServerPool ###
python -m themis.tmsprov -f --flushdb
python -m themis.tmsprov -a --features global
python -m themis.tmsprov -m --features global featuresByServerPool TRUE
python -m themis.tmsprov -a --resync
python -m themis.tmsprov -a --pool outbound 'lab01.u.inova.com.br'
python -m themis.tmsprov -a --policy outbound:default JailBy Sender+ Source any Destination any JailAction block

## Result: It will create namespace keys starting with pool name of the policy: outbound.

### Send to list ### -> OK
## Result: Will send to list account
### Test resync ### -> OK
### Test with broken sasl ### -> OK

# Test with wrong data in redis: policies/list/pools/config
# Send auto-response
